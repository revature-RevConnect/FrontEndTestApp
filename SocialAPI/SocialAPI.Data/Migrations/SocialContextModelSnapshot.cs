// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SocialAPI.Data.DataContext;

#nullable disable

namespace SocialAPI.Data.Migrations
{
    [DbContext(typeof(SocialContext))]
    partial class SocialContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("TestRevConnect")
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SocialAPI.Data.Models.Comment", b =>
                {
                    b.Property<int>("commentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("commentID"), 1L, 1);

                    b.Property<string>("authID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("postID")
                        .HasColumnType("int");

                    b.HasKey("commentID");

                    b.HasIndex("postID");

                    b.ToTable("Comments", "TestRevConnect");
                });

            modelBuilder.Entity("SocialAPI.Data.Models.Like", b =>
                {
                    b.Property<int>("likeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("likeID"), 1L, 1);

                    b.Property<string>("authID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("commentID")
                        .HasColumnType("int");

                    b.Property<int?>("postID")
                        .HasColumnType("int");

                    b.HasKey("likeID");

                    b.HasIndex("commentID");

                    b.HasIndex("postID");

                    b.ToTable("Likes", "TestRevConnect");
                });

            modelBuilder.Entity("SocialAPI.Data.Models.Post", b =>
                {
                    b.Property<int>("postID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("postID"), 1L, 1);

                    b.Property<string>("authID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("postID");

                    b.ToTable("Posts", "TestRevConnect");
                });

            modelBuilder.Entity("SocialAPI.Data.Models.User", b =>
                {
                    b.Property<int>("userID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userID"), 1L, 1);

                    b.Property<string>("aboutMe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("authID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("github")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("linkedin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("profilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("twitter")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userID");

                    b.ToTable("Users", "TestRevConnect");
                });

            modelBuilder.Entity("SocialAPI.Data.Models.Comment", b =>
                {
                    b.HasOne("SocialAPI.Data.Models.Post", null)
                        .WithMany("postComments")
                        .HasForeignKey("postID");
                });

            modelBuilder.Entity("SocialAPI.Data.Models.Like", b =>
                {
                    b.HasOne("SocialAPI.Data.Models.Comment", null)
                        .WithMany("commentLikes")
                        .HasForeignKey("commentID");

                    b.HasOne("SocialAPI.Data.Models.Post", null)
                        .WithMany("postLikes")
                        .HasForeignKey("postID");
                });

            modelBuilder.Entity("SocialAPI.Data.Models.Comment", b =>
                {
                    b.Navigation("commentLikes");
                });

            modelBuilder.Entity("SocialAPI.Data.Models.Post", b =>
                {
                    b.Navigation("postComments");

                    b.Navigation("postLikes");
                });
#pragma warning restore 612, 618
        }
    }
}
